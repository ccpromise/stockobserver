
const utility = require('utility');
const async = utility.async;
const httpReq = utility.httpReqTmpl;
const plans = require('tradeplans');
const getStockList = require('getStockList');
const getRtStockData = require('getRtStockData');
const numberOfSecIDPerReq = 50;

/**
 * run simulation for trade plans
 */
module.exports = function (plansId) {
    return getStockList().then((list) => {
        var i = 0, N = plansId.length;

        return async.while(() => {
            return i < N;
        }, () => {
            //* simulation for the i-th trade plan
            var id = plansId[i++];
            var j = 0, M = list.length;

            return async.while(() => {
                return j < M;
            }, () => {
                var stocks = list.slice(j, j + numberOfSecIDPerReq);
                j += numberOfSecIDPerReq;
                //* get open trades from database
                return httpReq('/simulate', { filter: { tradeplanId: id, secID: { $in: stocks }, closed: false } }, 'find').then((trades) => {
                    var tradeMap = new Map(stocks.map((secID) => [secID, []])), oldTrade = [], newTrade = [];
                    trades = JSON.parse(trades.toString());
                    for(let trade of trades) {
                        tradeMap.get(trade.secID).push(trade);
                    }
                    for(let [secID, openTrades] of tradeMap) {
                        //* update open trades and create new trades
                        var res = plans[id].simulate(openTrades, getRtStockData.get(secID));
                        oldTrade = oldTrade.concat(res[0]);
                        if(res[1]) newTrade.push(res[1]);
                    }
                    return [oldTrade, newTrade];
                }).then((res) => {
                    //* res[0]: updated old trades. res[1]: new trades
                    var updatedDocs = res[0].map((trade) => {
                        return {
                            filter: { _id: trade._id },
                            update: { $set: { tradeplanId: trade.tradeplanId, secID: trade.secID, st: trade.st, et: trade.et, ht: trade.ht, lt: trade.lt, sp: trade.sp, ep: trade.ep, hp: trade.hp, lp: trade.lp, closed: trade.closed } }
                        }
                    });
                    var newDocs = res[1].map((trade) => {
                        return {
                            filter: { tradeplanId: trade.tradeplanId, secID: trade.secID, st: trade.st },
                            update: { $set: { et: trade.et, ht: trade.ht, lt: trade.lt, sp: trade.sp, ep: trade.ep, hp: trade.hp, lp: trade.lp, closed: trade.closed }}
                        }
                    });
                    var allDocs = updatedDocs.concat(newDocs);
                    return allDocs.length === 0 ? Promise.resolve() : httpReq('/rtSimulate', allDocs, 'upsertMany');
                });
            }).catch((err) => {
                console.log('find err when running simulation for ', id, ': ', err);
            });
        });
    });
}
