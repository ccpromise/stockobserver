
const makeDataPvd = require('dataPvd');
const utility = require('utility');
const time = utility.time;
const object = utility.object;
const id = 'MA1060';

var ma9 = new Map();
var ma10 = new Map();
var ma59 = new Map();
var ma60 = new Map();
var endPrice = new Map();
var dts;

/**
 * end: data pvd
 * set the ma9, ma10, ma59, ma60, endPrice for secID based on end
 */
exports.getHistoryStockData = function (secID, end) {
    dts = time.getDateTs(time.today());
    return Promise.all([9, 10, 59, 60].map((N) => {
        return makeDataPvd({ type: 'ma', pack: { pvd: end, N: N } });
    })).then((pvds) => {
        var maxTs = end.maxTs;
        if(pvds[3].hasDef(maxTs)) {
            endPrice.set(secID, end.get(maxTs));
            ma9.set(secID, pvds[0].get(maxTs));
            ma10.set(secID, pvds[1].get(maxTs));
            ma59.set(secID, pvds[2].get(maxTs));
            ma60.set(secID, pvds[3].get(maxTs));
        }
    });
}

/**
 * rtData: { secID: xxx,price: xxx, yestClose: xxx }
 * openTrades: for MA1060, there is one open trade at most.
 */
exports.simulate = function (openTrades, rtData) {
    var secID = rtData.secID;
    var adjFactor = endPrice.get(secID) / rtData.yestClose;
    var price = rtData.price * adjFactor;
    var updatedTrades = [], newTrade;
    for(let trade of openTrades) {
        var cpy = object.clone(trade);
        cpy.et = dts;
        cpy.ep = price;
        if(price > cpy.hp) {
            cpy.ht = dts;
            cpy.hp = price;
        }
        if(price < cpy.lp) {
            cpy.lt = dts;
            cpy.lp = price;
        }
        if(sell(secID, price)) {
            cpy.closed = true;
        }
        updatedTrades.push(cpy);
    }
    if(buy(secID, price)) {
        newTrade = {
            tradeplanId: id,
            secID: secID,
            st: dts,
            ht: dts,
            lt: dts,
            et: dts,
            sp: price,
            hp: price,
            lp: price,
            ep: price,
            closed: false
        }
    }
    return [updatedTrades, newTrade];
}

function buy(secID, price) {
    return ma10.get(secID) < ma60.get(secID) && (ma9.get(secID) * 9 + price) / 10 > (ma59.get(secID) * 59 + price) / 60;
}

function sell(secID, price) {
    return ma10.get(secID) > ma60.get(secID) && (ma9.get(secID) * 9 + price) / 10 < (ma59.get(secID) * 59 + price) / 60;
}
