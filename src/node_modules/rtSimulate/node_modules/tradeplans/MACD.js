
const macdCoeff = require('config').macd;
const makeDataPvd = require('dataPvd');
const simulate = require('./simulate');
const utility = require('utility');
const time = utility.time;
const object = utility.object;
const refReplace = utility.refReplace;
const id = 'MACD';

var macd = new Map();
var ema1 = new Map();
var ema2 = new Map();
var dea = new Map();
var endPrice = new Map();
var dts;

exports.getHistoryStockData = function (secID, end) {
    dts = time.getDateTs(time.today());
    var macdLi = { type: 'macd', pack: { Nl: macdCoeff.Nl, Ns: macdCoeff.Ns, Na: macdCoeff.Na, pvd: end } }
    var ema1Li = { type: 'ema', pack: { N: macdCoeff.Nl, pvd: end } };
    var ema2Li = { type: 'ema', pack: { N: macdCoeff.Ns, pvd: end } };
    var difLi = { type: 'sub', pack: { pvds: [ema1Li, ema2Li], idx: 1 } };
    var deaLi = { type: 'ema', pack: { N: macdCoeff.Na, pvd: difLi } };
    return Promise.all([macdLi, ema1Li, ema2Li, deaLi].map(makeDataPvd)).then((pvds) => {
        var maxTs = end.maxTs;
        endPrice.set(secID, end.get(maxTs));
        macd.set(secID, pvds[0].get(maxTs).MACD);
        ema1.set(secID, pvds[1].get(maxTs));
        ema2.set(secID, pvds[2].get(maxTs));
        dea.set(secID, pvds[3].get(maxTs));
    });
}

exports.simulate = function (trades, rtdata) {
    return simulate(trades, rtdata, dts, endPrice, buy, sell, id);
}

function buy (secID, price) {
    var dif = ema1.get(secID) * (1 - 2 / (macdCoeff.Nl + 1)) + 2 / (macdCoeff.Nl + 1) * price - ema2.get(secID) * (1 - 2 / (macdCoeff.Ns + 1)) +2 / (macdCoeff.Ns + 1) * price;
    return (macd.get(secID) < 0) && (dif - dea.get(secID) * (1 - 2 / (macdCoeff.Na + 1)) + 2 / (macdCoeff.Na + 1) * dif > 0);
}

function sell (secID, price) {
    var dif = ema1.get(secID) * (1 - 2 / (macdCoeff.Nl + 1)) + 2 / (macdCoeff.Nl + 1) * price - ema2.get(secID) * (1 - 2 / (macdCoeff.Ns + 1)) +2 / (macdCoeff.Ns + 1) * price;
    return (macd.get(secID) > 0) && (dif - dea.get(secID) * (1 - 2 / (macdCoeff.Na + 1)) + 2 / (macdCoeff.Na + 1) * dif < 0);
}
