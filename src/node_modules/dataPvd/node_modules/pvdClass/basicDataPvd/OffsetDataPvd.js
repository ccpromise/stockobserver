
const DataPvd = require('./DataPvd');
const pvdGenerator = require('makeDataPvd');
const utility = require('utility');
const validate = utility.validate;
const object = utility.object;

/**
 * if N === 0, OffsetDataPvd.get(ts) === pvd.get(ts)
 * if N > 0, OffsetDataPvd.get(ts) === pvd.get(ts forward N days in pvd's domain)
 * if N < 0, OffsetDataPvd.get(ts) === pvd.get(ts backward N days in pvd's domain)
 * if in pvd.get(ts), valid domain of ts is [1,2,4,5]
 * var offset = new OffsetDataPvd(pvd, 2)
 * offset.get(2) === pvd.get(5); // 2 days after ts = 2
 */
function OffsetDataPvd(pvd, N, id) {
    DataPvd.call(this, id);
    if(N >= 0) {
        this.maxTs = pvd.backwardDateTs(pvd.maxTs, N);
        this.minTs = this.maxTs == -1 ? -1 : pvd.minTs;
    }
    else {
        this.minTs = pvd.forwardDateTs(pvd.minTs, -N);
        this.maxTs = this.minTs == -1 ? -1 : pvd.maxTs;
    }
    this._N = N;
    this._pvd = pvd;
}

OffsetDataPvd.prototype = Object.create(DataPvd.prototype);

OffsetDataPvd.prototype.hasDef = function(ts) {
    var realTs = this._N > 0 ? this._pvd.forwardDateTs(ts, this._N) : this._pvd.backwardDateTs(ts, -this._N);
    return this._pvd.hasDef(realTs);
}

OffsetDataPvd.prototype.get = function(ts) {
    if(!this.hasDef(ts)) throw new Error('invalid ts');
    var realTs = this._N > 0 ? this._pvd.forwardDateTs(ts, this._N) : this._pvd.backwardDateTs(ts, -this._N);
    return this._pvd.get(realTs);
}

OffsetDataPvd.prototype.forwardDateTs = function(ts, n) {
    return this._pvd.forwardDateTs(ts, n);
}

OffsetDataPvd.prototype.backwardDateTs = function(ts, n) {
    return this._pvd.backwardDateTs(ts, n);
}

function checkParams(paramObj) {
    return validate.isObj(paramObj) && object.numOfKeys(paramObj) === 2
    && validate.isInt(paramObj.N) && pvdGenerator.checkldp(paramObj.pvd);
}

function pvdID(paramObj) {
    return 'offset' + '_' + paramObj.N + '_' + pvdGenerator.pvdID(paramObj.pvd);
}

function makePvd(paramObj, id) {
    return pvdGenerator.makePvd(paramObj.pvd).then((pvd) => {
        return new OffsetDataPvd(pvd, paramObj.N, id);
    });
}

module.exports = {
    'checkParams': checkParams,
    'pvdID': pvdID,
    'makePvd': makePvd
}
