
const DataPvd = require('./DataPvd');
const utility = require('utility');
const object = utility.object;
const validate = utility.validate;
const pvdGenerator = require('makeDataPvd');

function PropDataPvd (pvd, propName, id) {
    DataPvd.call(this, id);
    this._pvd = pvd;
    this.maxTs = pvd.maxTs;
    this.minTs = pvd.minTs;
    this._propName = propName;
}

PropDataPvd.prototype = Object.create(DataPvd.prototype);

PropDataPvd.prototype.hasDef = function (ts) {
    return this._pvd.hasDef(ts);
}

PropDataPvd.prototype.get = function (ts) {
    if(!this._pvd.hasDef(ts)) throw new Error('invalid ts');// QUESTION ?
    return this._pvd.get(ts)[this._propName];
};

PropDataPvd.prototype.forwardDateTs = function (ts, n) {
    return this._pvd.forwardDateTs(ts, n);
}

PropDataPvd.prototype.backwardDateTs = function (ts, n) {
    return this._pvd.backwardDateTs(ts, n);
};

function checkParams (paramObj) {
    return validate.isObj(paramObj) && object.numOfKeys(paramObj) === 2
    && validate.isStr(paramObj.propName) && pvdGenerator.checkldp(paramObj.pvd);
}

function pvdID (paramObj) {
    return 'prop' + '_' + pvdGenerator.pvdID(paramObj.pvd) + '_' + paramObj.propName;
}

function makePvd (paramObj, id) {
    return pvdGenerator.makePvd(paramObj.pvd).then((pvd) => {
        return new PropDataPvd(pvd, paramObj.propName, id);
    });
}

module.exports = {
    'checkParams': checkParams,
    'pvdID': pvdID,
    'makePvd': makePvd
}
