
const CachedDataPvd = require('../basicDataPvd').CachedDataPvd;
const pvdGenerator = require('makeDataPvd');
const macdCoeff = require('config').macd;
const utility = require('utility');
const validate = utility.validate;
const object = utility.object;

function MACDDataPvd(pvd, dif, dea, macd, id) {
    CachedDataPvd.call(this, id);
    this._pvd = pvd;
    this._dif = dif;
    this._dea = dea;
    this._macd = macd;
    this.minTs = this._pvd.minTs;
    this.maxTs = this._pvd.maxTs;
}

MACDDataPvd.prototype = Object.create(CachedDataPvd.prototype);

MACDDataPvd.prototype.hasDef = function(ts) {
    return this._pvd.hasDef(ts);
}

MACDDataPvd.prototype._calculate = function(ts) {
    if(!this.hasDef(ts)) throw new Error('invalid ts');
    return {
        'DIF': this._dif.get(ts),
        'DEA': this._dea.get(ts),
        'MACD': this._macd.get(ts)
    }
}

MACDDataPvd.prototype.forwardDateTs = function(ts, n) {
    return this._pvd.forwardDateTs(ts, n);
}

MACDDataPvd.prototype.backwardDateTs = function(ts, n) {
    return this._pvd.backwardDateTs(ts, n);
}

function checkParams(paramObj) {
    return validate.isObj(paramObj) && (object.numOfKeys(paramObj) === 4 || object.numOfKeys(paramObj) === 1)
    && (paramObj.Ns === undefined || validate.isPosInt(paramObj.Ns))
    && (paramObj.Nl === undefined || validate.isPosInt(paramObj.Nl))
    && (paramObj.Na === undefined || validate.isPosInt(paramObj.Na))
    && pvdGenerator.checkldp(paramObj.pvd);
}

function pvdID(paramObj) {
    return 'macd' + '_' + (paramObj.Ns || macdCoeff.Ns) + '_' + (paramObj.Nl || macdCoeff.Nl) + '_' + (paramObj.Na || macdCoeff.Na) + '_' + pvdGenerator.pvdID(paramObj.pvd);
}

/**
 * referenceID: key - this.id
 *              value - the id of pvds which this pvd relies on.
 */
var referenceID = new Map();
function makePvd(paramObj, id) {
    var Nl = paramObj.Nl || macdCoeff.Nl;
    var Ns = paramObj.Ns || macdCoeff.Ns;
    var Na = paramObj.Na || macdCoeff.Na;
    var ema1Literal = {'type': 'ema', 'pack': {'N': Nl, 'pvd': paramObj.pvd}};
    var ema2Literal = {'type': 'ema', 'pack': {'N': Ns, 'pvd': paramObj.pvd}};
    var difLiteral = {'type': 'sub', 'pack': {'pvds': [ema1Literal, ema2Literal], 'idx': 1}};
    var deaLiteral = {'type': 'ema', 'pack': {'N': Na, 'pvd': difLiteral}};
    var ema1ID = pvdGenerator.pvdID(ema1Literal);
    var ema2ID = pvdGenerator.pvdID(ema2Literal);
    var deaID = pvdGenerator.pvdID(deaLiteral);
    referenceID.set(id, new Set([ema1ID, ema2ID, deaID]));
    return pvdGenerator.makePvd(paramObj.pvd).then((pvd) => {
        var ema1 = {'type': 'ema', 'pack': {'N': Nl, 'pvd': pvd}};
        var ema2 = {'type': 'ema', 'pack': {'N': Ns, 'pvd': pvd}};
        var dif = {'type': 'sub', 'pack': {'pvds': [ema1, ema2], 'idx': 1}};
        return pvdGenerator.makePvd(dif).then((difPvd) => {
            var dea = {'type': 'ema', 'pack': {'N': Na, 'pvd': difPvd}};
            return pvdGenerator.makePvd(dea).then((deaPvd) => {
                var macd = {'type': 'sub', 'pack': {'pvds': [difPvd, deaPvd], 'idx': 0}};
                return pvdGenerator.makePvd(macd).then((macdPvd) => {
                    return new MACDDataPvd(pvd, difPvd, deaPvd, macdPvd, id);
                });
            });
        });
    });

}

module.exports = {
    'checkParams': checkParams,
    'pvdID': pvdID,
    'makePvd': makePvd,
    'refPvdIDs': function(id) {
        return referenceID.get(id);
    }
}
