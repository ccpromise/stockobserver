
const CachedDataPvd = require('../basicDataPvd').CachedDataPvd;
const pvdGenerator = require('makeDataPvd');
const utility = require('utility');
const validate = utility.validate;
const object = utility.object;

function EMADataPvd(pvd, N, id) {
    CachedDataPvd.call(this, id);
    this.minTs = pvd.minTs;
    this.maxTs = pvd.maxTs;
    this._pvd = pvd;
    this._smoothnessIndex = 2 / (N+1);
}

EMADataPvd.prototype = Object.create(CachedDataPvd.prototype);

EMADataPvd.prototype.hasDef = function(ts) {
    return this._pvd.hasDef(ts);
}

EMADataPvd.prototype._calculate = function(ts) {
    if(!this.hasDef(ts)) throw new Error('invalid ts');
    var ema = this._pvd.get(this.minTs), lo = this.minTs, hi = ts;

    if(this._cache.size() != 0) {
        while(lo <= hi) {
            var mid = this._pvd.forwardDateTs(Math.floor((lo+hi)/2), 0);
            if(this._cache.has(mid)){
                lo = this._pvd.forwardDateTs(mid, 1);
            }
            else {
                hi = this._pvd.backwardDateTs(mid, 1);
            }
        }
        ema = this._cache.get(this._pvd.backwardDateTs(lo, 1));
    }

    while(this._pvd.hasDef(lo) && lo <= ts) {
        ema = this._smoothnessIndex * this._pvd.get(lo) + (1 - this._smoothnessIndex) * ema;
        this._cache.set(lo, ema);
        lo = this._pvd.forwardDateTs(lo, 1);
    }
    return ema;
}

EMADataPvd.prototype.forwardDateTs = function(ts, n) {
    return this._pvd.forwardDateTs(ts, n);
}

EMADataPvd.prototype.backwardDateTs = function(ts, n) {
    return this._pvd.backwardDateTs(ts, n);
}

// {'pvd': , 'N':}
function checkParams(paramObj) {
    return validate.isObj(paramObj) && object.numOfKeys(paramObj) === 2
    && validate.isPosInt(paramObj.N) && pvdGenerator.checkldp(paramObj.pvd);
}

function pvdID(paramObj) {
    return 'ema' + '_' + paramObj.N + '_' + pvdGenerator.pvdID(paramObj.pvd);
}

/**
 * referenceID: key - this.id
 *              value - this._pvd.id
 */
var referenceID = new Map();
function makePvd(paramObj, id) {
    var refPvdID = pvdGenerator.pvdID(paramObj.pvd);
    referenceID.set(id, new Set([refPvdID]));
    return pvdGenerator.makePvd(paramObj.pvd).then((pvd) => {
        return new EMADataPvd(pvd, paramObj.N, id);
    });
}

module.exports = {
    'checkParams': checkParams,
    'pvdID': pvdID,
    'makePvd': makePvd,
    'refPvdIDs': function(id) {
        return referenceID.get(id);
    }
};
