
const DataPvd = require('./DataPvd');
const Cache = require('utility').Cache;
const cacheCapacity = require('config').cacheCapacity;
const msg = 'Not Implemented';

/**
 * base class for cached data provider
 */
function CachedDataPvd(id) {
    DataPvd.call(this, id);
    this._cache = new Cache(cacheCapacity);
}

CachedDataPvd.prototype = Object.create(DataPvd.prototype);

/**
 * if ts found in cache, directly return the res.
 * else calculate the result and save it in cache.
 */
CachedDataPvd.prototype.get = function(ts) {
    if(!this.hasDef(ts)) throw new Error('invalid ts');
    if(!this._cache.has(ts))
        this._cache.set(ts, this._calculate(ts));
    return this._cache.get(ts);
}

//* if not cached, calculate the data according to ts.
CachedDataPvd.prototype._calculate = function(ts) {
    throw new Error(msg);
}

module.exports = CachedDataPvd;
