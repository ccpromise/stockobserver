
const utility = require('utility');
const validate = utility.validate;
const object = utility.object;
const pvdGenerator = require('makeDataPvd');
const CombinedDataPvd = require('./CombinedDataPvd');

/**
 * the generator for inherited class of CombinedDataPvd
 * paramObj: { pvds: [], idx: integer}
 */
function checkParams(paramObj, minPvdN, maxPvdN) {
    return validate.isObj(paramObj) && object.numOfKeys(paramObj) === 2 &&
    validate.isArr(paramObj.pvds) && paramObj.pvds.length >= minPvdN && paramObj.pvds.length <= maxPvdN
    && validate.isNonNegInt(paramObj.idx) && paramObj.idx < paramObj.pvds.length
    && paramObj.pvds.every((pvd) => pvdGenerator.checkldp(pvd));
}

function pvdID(paramObj, name) {
    return name + '_' + paramObj.pvds.map(pvd => pvdGenerator.pvdID(pvd)).join('_') + paramObj.idx ;
}

function makePvd(paramObj, id, getOperator) {
    return Promise.all(paramObj.pvds.map((pvd) => {
        return pvdGenerator.makePvd(pvd);
    })).then((pvds) => {
        return new CombinedDataPvd(pvds, paramObj.idx, id, getOperator);
    });
}

module.exports = function(name, getOperator, minPvdN, maxPvdN) {
    return {
        'checkParams': (paramObj) => checkParams(paramObj, minPvdN || 2, maxPvdN || Infinity),
        'pvdID': (paramObj) => pvdID(paramObj, name),
        'makePvd': (paramObj, id) => makePvd(paramObj, id, getOperator)
    }
}
