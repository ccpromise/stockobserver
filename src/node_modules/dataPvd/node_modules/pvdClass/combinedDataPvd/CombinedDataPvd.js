
const DataPvd = require('../basicDataPvd').DataPvd;

/**
 * base class for combined data providers whose constructor accept no less than two pvds as parameters,
 * examples includ add, sub, mul, div, and, gt
 * domainIdx is the index of pvd in pvds which decides the combined data provider's domain.
 * CombinedDataPvd.get(ts) = pvds.map((pvd) => pvd.get(ts)).reduce(getOp);
 * example: for AddDataPvd, getOp if defined as (pre, cur) => { return pre + cur; }
 */
function CombinedDataPvd(pvds, domainIdx, id, getOp) {
    DataPvd.call(this, id);
    this.minTs = pvds[domainIdx].minTs
    this.maxTs = pvds[domainIdx].maxTs;
    this._pvds = pvds;
    this._domainIdx = domainIdx;
    this._getOp = getOp;
}

CombinedDataPvd.prototype = Object.create(DataPvd.prototype);

CombinedDataPvd.prototype.hasDef = function(ts) {
    return this._pvds[this._domainIdx].hasDef(ts);
}

CombinedDataPvd.prototype.get = function(ts) {
    if(!this.hasDef(ts)) throw new Error('invalid ts');
    return this._pvds.map(pvd => pvd.get(ts)).reduce(this._getOp);
}

CombinedDataPvd.prototype.forwardDateTs = function(ts, n) {
    return this._pvds[this._domainIdx].forwardDateTs(ts, n);
}

CombinedDataPvd.prototype.backwardDateTs = function(ts, n) {
    return this._pvds[this._domainIdx].backwardDateTs(ts, n);
}

module.exports = CombinedDataPvd;
