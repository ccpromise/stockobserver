
const config = require('config');
const time = require('utility').time;
const taskStatus = require('usrConstants').taskStatus;
const process = require('process');
const httpHandlers = require('handlers');
const syslogCol = httpHandlers.system.db.syslogCol;
const taskCol = httpHandlers.task.db.taskCol;
const getSecID = require('datasrc').wmcloud.getSecID;

module.exports = function () {
    var loop = function() {
        setTimeout(() => {
            var today = time.today();
            var produceTime = time.today(config.produceTime.updateStockData);
            syslogCol.findOne({ _id: 'lastUpdateStockDate' }).then((doc) => {
                if(time.isAfter(time.now(), produceTime) && (doc === null || time.isAfter(today, doc.date))) {
                    //* find secID list to produce task
                    return getSecID().then((list) => {
                        console.log('# of stocks to update: ', list.length);
                        if(list.length === 0) return Promise.resolve();
                        //* produce stock data update task
                        return insertUpdateTask(list).then((objIdMap) => {
                            //* start download task until all these tasks finished.
                            return insertDownloadTask(list, objIdMap).then((objIdMap) => {
                                //* start simulate task until downloading stock data finished
                                return insertSimulateTask(list, objIdMap);
                            })
                        })
                    }).then(() => {
                        console.log(time.format(time.now()), ': start to update stock data...');
                        return syslogCol.upsert({ _id: 'lastUpdateStockDate' }, { $set: { date: time.format(today, 'YYYYMMDD') } });
                    });
                }
            }).catch((err) => {
                console.log('fail to produce update stock data task: ', err);
                process.exit();
            }).then(loop);
        }, config.produceInterval.updateStockData)
    };
    loop();
}

/**
 * produce stock update task. return secID-objectId map.
 */
function insertUpdateTask(list) {
    var docs = list.map((secID) => {
        return {
            task: {
                type: 'updateStockData',
                pack: secID
            },
            status: taskStatus.ready,
            log: [{
                desc: 'build new ready task',
                time: time.format(time.now()),
                err: null
            }]
        };
    });
    return taskCol.insertMany(docs).then((r) => {
        var objIdMap = new Map();
        for(let op of r.ops) {
            objIdMap.set(op.task.pack, op._id.toString());
        }
        return objIdMap;
    });
}

/**
 * produce download stock data to local directory task
 */
function insertDownloadTask (list, objIdMap) {
    var docs = list.map((secID) => {
        return {
            task: {
                type: 'downloadStockData',
                pack: secID
            },
            status: taskStatus.wait,
            readyCondition: {
                type: 'or',
                pack: [
                    {
                        type: 'success',
                        pack: objIdMap.get(secID)
                    },
                    {
                        type: 'fail',
                        pack: objIdMap.get(secID)
                    }
                ]
            },
            log: [{
                desc: 'build new waiting task',
                time: time.format(time.now()),
                err: null
            }]

        }
    })
    return taskCol.insertMany(docs).then((r) => {
        var objIdMap = new Map();
        for(let op of r.ops) {
            objIdMap.set(op.task.pack, op._id.toString());
        }
        return objIdMap;
    });
}

/**
 * produce simulate task. associate task ready condtion with the corresponding object id
 */
function insertSimulateTask(list, objIdMap) {
    var docs = list.map((secID) => {
        return {
            task: {
                type: 'simulate',
                pack: { tradeplanId: 'MA1060', secID: secID }
            },
            status: taskStatus.wait,
            readyCondition: {
                type: 'or',
                pack: [
                    {
                        type: 'success',
                        pack: objIdMap.get(secID)
                    },
                    {
                        type: 'fail',
                        pack: objIdMap.get(secID)
                    }
                ]
            },
            log: [{
                desc: 'build new waiting task',
                time: time.format(time.now()),
                err: null
            }]

        }
    })
    return taskCol.insertMany(docs);
}
