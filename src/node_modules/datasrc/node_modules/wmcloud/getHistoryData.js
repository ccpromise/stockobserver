
const getMktEquad = require('./getMktEquad');
const utility = require('utility');
const time = utility.time;
const clone = utility.object.clone;
const stockDataQueryPat = {
    field: '',
    beginDate: '',
    endDate: '',
    secID: '',
    ticker: '',
    tradeDate: ''
};
const property = ['o', 'e', 'h', 'l', 'x', 'v'];
const fields = ['tradeDate', 'openPrice', 'closePrice', 'highestPrice', 'lowestPrice', 'turnoverRate', 'turnoverVol', 'preClosePrice', 'accumAdjFactor'];

module.exports = function(secID, beginDate, endDate) {
    return Promise.resolve().then(() => {
        var query = clone(stockDataQueryPat);
        query.secID = secID;
        query.field = fields.join(',');
        query.beginDate = beginDate || '19900101';
        query.endDate = endDate || time.format(time.today(), 'YYYYMMDD');
        return getMktEquad(query).then((obj) => {
            if(obj.retCode != 1) return Promise.reject(new Error(obj.retMsg));
            var minDay = time.format(time.today(), 'YYYYMMDD');
            var maxDay = '19900101';
            var tradeData = obj.data.reduce((pre, cur) => {
                var date = time.format(cur.tradeDate, 'YYYYMMDD');
                minDay = time.isAfter(date, minDay) ? minDay : date;
                maxDay = time.isAfter(maxDay, date) ? maxDay : date;
                pre[date] = {};
                var adjFactor = cur.accumAdjFactor / obj.data[0].accumAdjFactor;
                for(var i = 0; i < 4; i++)
                    pre[date][property[i]] = cur[fields[i+1]] * adjFactor;
                for(i = 4; i < 6; i++)
                    pre[date][property[i]] = cur[fields[i+1]];
                return pre;
            }, {});
            return {
                data: tradeData,
                minDay: minDay,
                maxDay: maxDay,
                preClosePrice: obj.data[0].preClosePrice
            };
        });
    })
};
